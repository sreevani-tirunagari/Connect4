[{"D:\\Front-End-Development\\gitexp\\ReactJS_FrontEndDevelopment\\w4 Connect4\\src\\index.js":"1","D:\\Front-End-Development\\gitexp\\ReactJS_FrontEndDevelopment\\w4 Connect4\\src\\App.js":"2","D:\\Front-End-Development\\gitexp\\ReactJS_FrontEndDevelopment\\w4 Connect4\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":1617419766000,"results":"4","hashOfConfig":"5"},{"size":10253,"mtime":1630411578635,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1617419766000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rhbp3k",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Front-End-Development\\gitexp\\ReactJS_FrontEndDevelopment\\w4 Connect4\\src\\index.js",[],"D:\\Front-End-Development\\gitexp\\ReactJS_FrontEndDevelopment\\w4 Connect4\\src\\App.js",["15","16","17"],"import React, {Component} from 'react';\nimport './App.css'\n\nimport { BrowserRouter as Router, Redirect} from 'react-router-dom';\nimport Route from 'react-router-dom/Route';\n\n\n\nconst about = ()=>{\n  return ( \n    <div className=\"container mt-5\" align=\"center\">\n        <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\" id=\"exampleModalLabel\">About Connect4</h5>\n              <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </div>\n            <div class=\"modal-body\">\n            Connect Four is a two-player connection board game, in which the players choose a color and then take turns dropping colored discs into a seven-column, six-row vertically suspended grid.\n             The pieces fall straight down, occupying the lowest available space within the column. \n             The objective of the game is to be the first to form a horizontal, vertical, or diagonal line of four of one's own discs. Connect Four is a solved game. The first player can always win by playing the right moves.\n            \n            </div>\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n            </div>\n          </div>\n        </div>\n      </div>\n        <div class=\"card text-center text-white bg-dark mb-3 col-6\">\n        <div class=\"card-header\" aria-hidden=\"true\" data-toggle=\"modal\" data-target=\"#exampleModal\">\n        <p> To know about the game click <i  className=\"fa fa-info\"></i></p>\n        </div>\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">Connect4</h5>\n          <img src=\"https://upload.wikimedia.org/wikipedia/commons/a/ad/Connect_Four.gif\" className=\"my-4\" alt=\"Game Instruction\"/><br/>\n          <a href=\"/player\" class=\"btn btn-primary\"><i class=\"fa fa-gamepad\"></i> Game</a>\n        </div>\n        <div class=\"card-footer text-muted\">\n          Copyright | @Sreevani | All rights reserved\n        </div>\n      </div>\n    </div>\n    \n  );\n}\n\n\nclass App extends Component {\n\n\n      constructor(props){\n        super(props);\n        this.state={\n          player1: \"\",\n          player2: \"\",\n          yellow : \"\",\n          blue: \"\", \n          setName: false   \n        }\n      }\n\n      componentWillUnmount(){\n        localStorage.clear();\n      }\n      menu = () =>{\n        return(\n          <div className=\"container menu\">\n            <div className=\"row col-sm\">\n            <div className=\"col\">\n              <button className=\"btn btn-primary btn-lg mx-5 col-1\" disabled> </button><br/>\n              <div class=\"input-group mb-3 my-5\">\n              <input type=\"text\" class=\"form-control\" placeholder=\"Enter Name\" aria-label=\"Recipient's username\" onInput={this.input1} value={this.state.player1} aria-describedby=\"basic-addon2\"/>\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text\" id=\"basic-addon2\">Player1</span>\n              </div>\n              </div>\n            </div>\n            <div className=\"col\">\n              <button className=\"btn btn-warning btn-lg mx-5 col-1\" disabled> </button><br/>\n              <div class=\"input-group mb-3 my-5\">\n              <input type=\"text\" class=\"form-control\" placeholder=\"Enter Name\" aria-label=\"Recipient's username\" onInput={this.input2} value={this.state.player2} aria-describedby=\"basic-addon2\"/>\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text\" id=\"basic-addon2\">Player2</span>\n              </div>\n              </div>\n            </div>\n            </div>\n                <button type=\"button\" class=\"btn btn-outline-success\" onClick={this.setCoin}><i class=\"fa fa-play\" aria-hidden=\"true\"></i>  Play</button>\n          </div>\n        );\n      }\n\n    input1 = (event)=>{\n      this.setState({\n        player1: event.target.value\n      })\n    }\n\n    input2 = (event)=>{\n      this.setState({\n        player2: event.target.value\n      })\n    }\n\n    setCoin = () =>{\n      if(this.state.player1 === \"\" || this.state.player2 ===\"\"){\n        alert(\"Fill the names\"); \n        return;\n      }\n      this.setState({\n        blue:this.state.player1,\n        yellow:this.state.player2\n      })\n      localStorage.setItem(\"Yellow\",this.state.player2);\n      localStorage.setItem(\"Blue\",this.state.player1);\n      localStorage.setItem(\"blueScore\",0);\n      localStorage.setItem(\"yellowScore\",0);\n      window.location.replace(\"/game\");\n    }\n\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n\n                 <Route path=\"/\" exact component={about}/>  \n\n                 <Route path=\"/player\" exact component={this.menu}/> \n\n                <Route path=\"/game\" exact render={() =>(\n                 localStorage.getItem(\"Blue\") != null? (<Board />): (<Redirect to=\"/player\" />))\n                }/>  \n\n              </div>\n            </Router>\n        );\n    }\n}\n\nclass Board extends Component {\n\n  constructor(props)\n  {\n    super(props);\n    this.state={\n      blue: \"bg-primary\",\n      yellow: \"bg-warning\",\n      board: [[\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\"],\n              [\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\"],\n              [\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\"],\n              [\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\"],\n              [\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\"],\n              [\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\",\"bg-light\"],\n        ],\n      blueStatus: true\n    };\n  }\n\n  render(){\n    return(\n      <div className=\"container\">\n            <h1>Connect4</h1>\n            <div class=\"dropdown sticky-top\">\n            <button type=\"button\" class={this.state.blueStatus?\"btn btn-primary btn-lg\":\"btn btn-warning btn-lg\"}  id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">{this.state.blueStatus?localStorage.getItem(\"Blue\")+\" : \"+localStorage.getItem(\"blueScore\"):localStorage.getItem(\"Yellow\")+\" : \"+localStorage.getItem(\"yellowScore\")}</button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              <a class=\"dropdown-item\" >{!this.state.blueStatus?localStorage.getItem(\"Blue\")+\" : \"+localStorage.getItem(\"blueScore\"):localStorage.getItem(\"Yellow\")+\" : \"+localStorage.getItem(\"yellowScore\")}</a>\n            </div>\n          </div>\n\n       <button type=\"button\" class=\"btn btn-dark\" onClick={this.restart}>Restart</button>\n            <table class=\"col-lg-7 table table-dark\" align=\"center\">\n            <tbody>\n              {this.state.board.map((colors,i) =>\n                  <tr key={i}>\n                     <td onClick={() =>this.game(0)} className={colors[0]}></td>\n                     <td onClick={() =>this.game(1)} className={colors[1]}></td>\n                     <td onClick={() =>this.game(2)} className={colors[2]}></td>\n                     <td onClick={() =>this.game(3)} className={colors[3]}></td>\n                     <td onClick={() =>this.game(4)} className={colors[4]}></td>\n                     <td onClick={() =>this.game(5)} className={colors[5]}></td>\n                     <td onClick={() =>this.game(6)} className={colors[6]}></td>\n                  </tr>    \n              )}\n            </tbody>\n          </table>\n        </div>\n    )\n  }\n\n  game(col){\n    let row=5\n    console.log(localStorage.getItem(\"Blue\"))\n    while(row>=0)\n    {\n      if(this.state.board[row][col] === \"bg-light\" && row>=0 && col>=0)\n      {\n        var board = this.state.board\n        board[row][col] = this.state.blueStatus? this.state.blue:this.state.yellow;\n        this.setState(state =>({\n          board:board,\n          blueStatus: !state.blueStatus\n        }))\n        if(this.winCheck(board,this.state.board[row][col]))\n        {\n          let winner=this.state.board[row][col]\n          if(winner === this.state.blue)\n          {\n              var message=localStorage.getItem(\"Blue\")+\" is the winner!..\"\n              localStorage.setItem(\"blueScore\",parseInt(localStorage.getItem(\"blueScore\"))+1)\n          }\n          else\n          {\n            var message=localStorage.getItem(\"Yellow\")+\" is the winner!..\"\n            localStorage.setItem(\"yellowScore\",parseInt(localStorage.getItem(\"yellowScore\"))+1)\n          }\n          alert(message)\n          if(localStorage.getItem(\"Blue\") === null)\n          {\n            window.location.replace(\"/player\")\n          }\n          else\n          {\n            window.location.replace(\"/game\")\n          }\n        }\n        break;\n      }\n      row--;\n    }\n  }\n\n  restart(){\n    localStorage.clear();\n    window.location.replace(\"/player\");\n  }\n\n  winCheck(board,piece){\n    // Check horizontal locations for win\n    for(let c=0;c<4;c++)\n    {\n      for(let r=0;r<6;r++)\n      {\n        if(board[r][c] === piece && board[r][c+1] === piece && board[r][c+2] ===piece && board[r][c+3] === piece)\n        {\n          return true\n        }\n      }\n    }\n\n    // Check vertical locations for win\n    for(let c=0;c<7;c++)\n    {\n      for(let r=0;r<3;r++)\n      {\n        if(board[r][c] === piece && board[r+1][c] === piece && board[r+2][c] ===piece && board[r+3][c] === piece)\n        {\n          return true\n        }\n      }\n    }\n\n    // Check positively sloped diaganols\n    for(let c=0;c<4;c++)\n    {\n      for(let r=0;r<3;r++)\n      {\n        if(board[r][c] === piece && board[r+1][c+1] === piece && board[r+2][c+2] ===piece && board[r+3][c+3] === piece)\n        {\n          return true\n        }\n      }\n    }\n\n    // Check negatively sloped diaganols\n    for(let c=0;c<4;c++)\n    {\n      for(let r=3;r<6;r++)\n      {\n        if(board[r][c] === piece && board[r-1][c+1] === piece && board[r-2][c+2] ===piece && board[r-3][c+3] === piece)\n        {\n          return true\n        }\n      }\n    }\n  }\n}\n\nexport default App;\n","D:\\Front-End-Development\\gitexp\\ReactJS_FrontEndDevelopment\\w4 Connect4\\src\\reportWebVitals.js",[],{"ruleId":"18","severity":1,"message":"19","line":170,"column":15,"nodeType":"20","endLine":170,"endColumn":41},{"ruleId":"21","severity":1,"message":"22","line":203,"column":23,"nodeType":"23","messageId":"24","endLine":206,"endColumn":11},{"ruleId":"25","severity":1,"message":"26","line":217,"column":17,"nodeType":"27","messageId":"28","endLine":217,"endColumn":24},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'board'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'message' is already defined.","Identifier","redeclared"]